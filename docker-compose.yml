version: "3.8"

services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    networks:
      - fraud_detection
    restart: unless-stopped

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    hostname: datanode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    networks:
      - fraud_detection
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    hostname: zookeeper
    environment: 
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    ports:
      - "2181:2181"
    networks:
      - fraud_detection
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Removed Zookeeper connection config to use KRaft mode only
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - fraud_detection
    restart: unless-stopped

  kafdrop:
    image: obsidiandynamics/kafdrop:3.28.0
    container_name: kafdrop
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    ports:
      - "9001:9000"
    networks:
      - fraud_detection
    depends_on:
      - kafka
    restart: unless-stopped

  hbase:
    image: harisekhon/hbase
    container_name: hbase
    hostname: hbase
    ports:
      - "16010:16010"
    environment:
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      - HBASE_HOME=/usr/local/hbase
      - HBASE_MANAGES_ZK=false
      - HBASE_ZOOKEEPER_QUORUM=zookeeper
    volumes:
      - hbase_data:/hbase-data
    depends_on:
      - zookeeper
    networks:
      - fraud_detection
    restart: unless-stopped

  spark:
    image: bitnami/spark:3.5.0
    container_name: spark
    hostname: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - spark_data:/bitnami/spark
    networks:
      - fraud_detection
    restart: unless-stopped

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark
    networks:
      - fraud_detection
    restart: unless-stopped

volumes:
  hadoop_namenode:
  hadoop_datanode:
  zookeeper_data:
  hbase_data:
  kafka_data:
  spark_data:

networks:
  fraud_detection:
    driver: bridge